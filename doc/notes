Algoritmi parallelizzabili:

- quicksort (paolo, 2 versioni)
- mergesort (fabio) + mergesort with load balancing
- samplesort (nicola) (in cui è incluso il bucketsort)
- bitonicsort 

ip:
- distribuzione uniforme degli items ?
- items DISTRIBUITI VS CENTRALIZZATI in un nodo -> soluzione: file unico all'inizio e alla fine, magari misuriamo anche il tempo di scattering del file...
- INTERFACE:
	sort ( data, rete )s
	generate ( )
	load ( )
	store ( )
	
- possibilità di sfruttare la memoria condivisa dei nodi
	openMPI (ci fidiamo del supporto che utilizzi la memoria condivisa?) "FLAT VERSION" (piazzare i communicator dei processi sui vari core..see http://www.mcs.anl.gov/research/projects/mpich2/index.php)
	libreria a memoria condivisa "multithread" (openMP, fastflow,...) "DUE LIVELLI: parallelo mpi e sotto altro meccanismo ( openmp, fastflow, posixthread, liblc)" (dedicare un processo al dispatching per ogni macchina...? (una sorta di kp...))
	
- sort sotto la dimensione della cahce L1 ? eventuale switching to another algorithm

TPIE? peter sanders... sequenziale..
FG thomas kormen

main:
	if rank0:
		parse arguments
		broadcast a struct describing what to do
	else:
		get the struct from rank0

	if rank == 0
		generate random data
	start sort
	if rank == 0 
		collect results...


processes need to know:
	algorithm to use
	its ID and how many processes are working (MPI)
	how much data, global and per process
	where to load and store data






***********************************************************************************************************************
sintassi:
//variabili pubbliche solo nelle strutture "record"

	class PrimaLetteraMaiuscola 
	{
		private: 
			_nomeVar
			
		public:
			PrimaLetteraMaiuscola( );
			~PrimaLetteraMaiuscola( );
			primaLetteraMinuscola( );
				
	};
	
	namespace tuttoattaccatoetuttominuscolo 
	{ 
	
	};
	
	/*!
	 * \brief
	 *
	 * descrizione per esteso
	 * ricordarsi di mettere il const ovunque possibile 
	 * riferimenti (&) sempre costanti, se una struttura va modificata si passa invece il pointer
	 */
	void foo( ) const 
	{
		int var; //senza underscore davanti
	}
	
***********************************************************************************************************************




